# books/models.py
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    surname = models.CharField(max_length=100)
    personal_thoughts = models.TextField(blank=True)

    def __str__(self):
        return f"{self.name} {self.surname}"

class Book(models.Model):
    title = models.CharField(max_length=200)
    genre = models.CharField(max_length=100)
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    personal_thoughts = models.TextField(blank=True)

    def __str__(self):
        return self.title

# books/views.py
from django.shortcuts import render
from .models import Book, Author

def book_detail(request, book_id):
    book = get_object(Book, pk=book_id)
    return render(request, 'books/book_detail.html', {'book': book})

def author_detail(request, author_id):
    author = get_object(Author, pk=author_id)
    return render(request, 'books/author_detail.html', {'author': author})

# books/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('book/<int:book_id>/', views.book_detail, name='book_detail'),
    path('author/<int:author_id>/', views.author_detail, name='author_detail'),
]

# books/forms.py
from django import forms
from .models import Book, Author

class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['title', 'genre', 'author', 'personal_thoughts']

class AuthorForm(forms.ModelForm):
    class Meta:
        model = Author
        fields = ['name', 'surname', 'personal_thoughts']

# logger.py
import logging

class CustomLogger:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    def call(self, function_name):
        self.logger.debug(f"Called function: {function_name}")

    def process_request(self, request):
        self.logger.info(f"Processing request: {request.method} {request.path}")

    def process_response(self, response):
        self.logger.info(f"Processed response with status: {response.status_code}")

    def log_message(self, message):
        self.logger.debug(message)

    def log_successful_request(self, request):
        self.logger.info(f"Successful request: {request.method} {request.path}")

logger = CustomLogger()

